<?xml version="1.0" encoding="utf-8" ?>
<project name="PackageBuilder" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="file.current.no_extension" value="package" />
  <property name="dirs.current" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <property name="path.to.toplevel" value=".." />
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}\${path.to.toplevel}\${folder.build_scripts_custom}" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}\${path.to.toplevel}\${folder.code_build}" />
  <property name="folder.code_drop" value="code_drop" overwrite="false" />
  <property name="dirs.drop" value="${dirs.current}\${path.to.toplevel}\${folder.code_drop}" overwrite="false" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />
  <property name="folder.database" value="__DATABASE_FOLDER_NAME__" overwrite="false" />
  <property name="folder.reports" value="${project.name}.Reports" overwrite="false" />
  <property name="folder.file_server" value="file.server" overwrite="false" />
  <property name="folder.environment_files" value="environment.files" overwrite="false" />
  <property name="folder.deployment" value="deployment" overwrite="false" />
  <property name="folder.settings" value="settings" overwrite="false" />
  <property name="folder.documentation" value="docs" overwrite="false" />
  <property name="file.build_info" value="${dirs.build}\_BuildInfo.xml" />
  <property name="file.custom.step.before" value="${dirs.build_scripts_custom}\${file.current.no_extension}.pre.step" />
  <property name="file.custom.step.after" value="${dirs.build_scripts_custom}\${file.current.no_extension}.post.step" />
  <property name="file.custom.step.replace" value="${dirs.build_scripts_custom}\${file.current.no_extension}.replace.step" />
  <property name="is.replaced" value="false" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo message="Running ${project::get-name()} tasks." />
    <call target="custom_tasks_before" if="${target::exists('custom_tasks_before')}"  />
    <call target="custom_tasks_replace" if="${target::exists('custom_tasks_replace')}"  />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <call target="custom_tasks_after" if="${target::exists('custom_tasks_after')}" />
  </target>

  <target name="run_normal_tasks"
          depends="prepare, build_artifacts, app, web, db, reports, file_server, environment_files, deployment_scripts, settings_files, build_deployment_files, build_info_file, documentation"
          description="Packaging project." />

  <target name="prepare">
    <echo message="Removing and adding ${dirs.drop}."/>
    <delete dir="${dirs.drop}" failonerror="false" />
    <mkdir dir="${dirs.drop}" />
  </target>

  <target name="custom_tasks_before">
    <echo message="Running custom tasks if ${file.custom.step.before} exists." />
    <nant buildfile="${file.custom.step.before}" inheritall="true" if="${file::exists(file.custom.step.before)}" failonerror="false" />
    <exec program="powershell.exe" if="${file::exists(file.custom.step.before + '.ps1')}" failonerror="false">
      <arg value="${path::get-full-path(file.custom.step.before + '.ps1')}" />
    </exec>
    <exec program="ruby.exe" if="${file::exists(file.custom.step.before + '.rb')}" failonerror="false">
      <arg value="${path::get-full-path(file.custom.step.before + '.rb')}" />
    </exec>
  </target>

  <target name="custom_tasks_replace">
    <echo message="Running custom tasks instead of normal tasks if ${file.custom.step.replace} exists." />
    <property name="is.replaced" value="true" if="${file::exists(file.custom.step.replace)}" />
    <nant buildfile="${file.custom.step.replace}" inheritall="true" if="${file::exists(file.custom.step.replace)}" />
    <property name="is.replaced" value="true" if="${file::exists(file.custom.step.replace + '.ps1')}" />
    <exec program="powershell.exe" if="${file::exists(file.custom.step.replace + '.ps1')}" failonerror="false">
      <arg value="${path::get-full-path(file.custom.step.replace + '.ps1')}" />
    </exec>
    <property name="is.replaced" value="true" if="${file::exists(file.custom.step.replace + '.rb')}" />
    <exec program="ruby.exe" if="${file::exists(file.custom.step.replace + '.rb')}" failonerror="false">
      <arg value="${path::get-full-path(file.custom.step.replace + '.rb')}" />
    </exec>
  </target>

  <target name="build_artifacts">
    <echo message="Packaging build artifacts (such as test results) to ${dirs.drop}\${folder.build_artifacts}."/>
    <copy todir="${dirs.drop}\${folder.build_artifacts}">
      <fileset basedir="${dirs.build}\${folder.build_artifacts}">
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="app">
    <echo message="Packaging application items to ${dirs.drop}\${folder.app.drop}."/>
    <copy todir="${dirs.drop}\${folder.app.drop}">
      <fileset basedir="${dirs.build}\${folder.app.drop}">
        <exclude name="${folder.database}\**" />
        <exclude name="${folder.reports}\**" />
        <exclude name="${folder.deployment}\**" />
        <exclude name="${folder.documentation}\**" />
        <exclude name="${folder.environment_files}\**" />
        <exclude name="${folder.file_server}\**" />
        <exclude name="${folder.build_artifacts}\**" />
        <exclude name="*_Published*\**" />
        <exclude name="*Test*\**" />
        <exclude name="*.Specs*\**" />
        <exclude name="*bdddoc.*" />
        <exclude name="*developwithpassion.bdd.*" />
        <exclude name="*nunit.*" />
        <exclude name="*QuickGraph*.*" />
        <exclude name="*MbUnit*.*" />
        <exclude name="*Rhino.Mocks.*" />
        <exclude name="*Refly.*" />
        <exclude name="**\*.template" />
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="web">
    <echo message="Packaging website to ${dirs.drop}\_PublishedWebSites."/>
    <copy todir="${dirs.drop}\_PublishedWebSites">
      <fileset basedir="${dirs.build}\${folder.app.drop}\_PublishedWebSites">
        <exclude name="**\*.template" />
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="db">
    <echo message="Packaging database files to ${dirs.drop}\${folder.database}."/>
    <copy todir="${dirs.drop}\${folder.database}">
      <fileset basedir="${dirs.build}\${folder.database}">
        <exclude name="**\*.template" />
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="reports">
    <echo message="Packaging reports to ${dirs.drop}\${folder.reports}."/>
    <copy todir="${dirs.drop}\${folder.reports}">
      <fileset basedir="${dirs.current}\${path.to.toplevel}\${folder.reports}">
        <exclude name="**\*.template" />
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="file_server">
    <echo message="Packaging file server items to ${dirs.drop}\${folder.file_server}."/>
    <copy todir="${dirs.drop}\${folder.file_server}">
      <fileset basedir="${dirs.current}\${path.to.toplevel}\${folder.file_server}">
        <exclude name="**\*.template" />
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="environment_files">
    <echo message="Packaging environment files to ${dirs.drop}\${folder.environment_files}."/>
    <copy todir="${dirs.drop}\${folder.environment_files}">
      <fileset basedir="${dirs.build}\${folder.environment_files}">
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="deployment_scripts">
    <echo message="Packaging deployment scripts to ${dirs.drop}\${folder.deployment}."/>
    <copy todir="${dirs.drop}\${folder.deployment}">
      <fileset basedir="${dirs.current}\${path.to.toplevel}\${folder.deployment}">
        <exclude name="**\*.template" />
        <exclude name="templates\**" />
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="settings_files">
    <echo message="Packaging settings files to ${dirs.drop}\${folder.settings}."/>
    <copy todir="${dirs.drop}\${folder.settings}">
      <fileset basedir="${dirs.current}\${path.to.toplevel}\${folder.settings}">
        <include name="**/*.settings" />
      </fileset>
    </copy>
  </target>

  <target name="build_deployment_files">
    <echo message="Building Deployment Files."/>
    <nant buildfile="deploymentBuilder.step" inheritall="true" failonerror="false" />
  </target>

  <target name="build_info_file">
    <echo message="Copying ${file.build_info} to ${folder.build_artifacts}, ${folder.app.drop}, and ${folder.deployment} in the ${dirs.drop} folder."/>

    <copy
     file="${file.build_info}"
     todir="${dirs.drop}\${folder.build_artifacts}"
      />

    <copy
     file="${file.build_info}"
     todir="${dirs.drop}\${folder.app.drop}"
      />

    <copy
      file="${file.build_info}"
      todir="${dirs.drop}\${folder.deployment}"
      />
  </target>

  <target name="documentation">
    <echo message="Packaging documentation files to ${dirs.drop}\${folder.documentation}."/>
    <copy todir="${dirs.drop}\${folder.documentation}">
      <fileset basedir="${dirs.build}\${folder.documentation}">
        <include name="**/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="custom_tasks_after">
    <echo message="Running custom tasks if ${file.custom.step.after} exists." />
    <nant buildfile="${file.custom.step.after}" inheritall="true" if="${file::exists(file.custom.step.after)}" failonerror="false" />
    <exec program="powershell.exe" if="${file::exists(file.custom.step.after + '.ps1')}" failonerror="false">
      <arg value="${path::get-full-path(file.custom.step.after + '.ps1')}" />
    </exec>
    <exec program="ruby.exe" if="${file::exists(file.custom.step.after + '.rb')}" failonerror="false">
      <arg value="${path::get-full-path(file.custom.step.after + '.rb')}" />
    </exec>
  </target>

</project>